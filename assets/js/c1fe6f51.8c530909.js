"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[988],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=n(87462),i=(n(67294),n(3905));const r={sidebar_position:4},a="Optimization",l={unversionedId:"Optimization",id:"Optimization",title:"Optimization",description:"You want your instance pooling to be fast. That was the point of implementing it after all, right? So, let's make it fast(er)!",source:"@site/docs/Optimization.md",sourceDirName:".",slug:"/Optimization",permalink:"/docs/Optimization",draft:!1,editUrl:"https://github.com/lewisakura/Pooler/edit/master/docs/Optimization.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"defaultSidebar",previous:{title:"Usage",permalink:"/docs/Usage"}},s={},p=[{value:"Scaling up the pool",id:"scaling-up-the-pool",level:2},{value:"Dynamic scaling",id:"dynamic-scaling",level:3},{value:"Using a different return method",id:"using-a-different-return-method",level:2},{value:"Disabling safety",id:"disabling-safety",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"optimization"},"Optimization"),(0,i.kt)("p",null,"You want your instance pooling to be fast. That was the point of implementing it after all, right? So, let's make it fast(er)!"),(0,i.kt)("h2",{id:"scaling-up-the-pool"},"Scaling up the pool"),(0,i.kt)("p",null,"The default size of the pool is 100. Depending on your use case, this will be way too little instances. Pass ",(0,i.kt)("inlineCode",{parentName:"p"},"size = <n>")," to increase the\ndefault pool size."),(0,i.kt)("h3",{id:"dynamic-scaling"},"Dynamic scaling"),(0,i.kt)("p",null,"Pooler supports a form of dynamic scaling by using ",(0,i.kt)("inlineCode",{parentName:"p"},"pool:Resize(newSize)"),". This will automatically add or remove instances depending on\non the new size. You can also get the current size by using ",(0,i.kt)("inlineCode",{parentName:"p"},"pool:Size()")," to introduce some automatic scaling based on pool usage."),(0,i.kt)("h2",{id:"using-a-different-return-method"},"Using a different return method"),(0,i.kt)("p",null,"If you're using ",(0,i.kt)("inlineCode",{parentName:"p"},"BasePart"),"s or ",(0,i.kt)("inlineCode",{parentName:"p"},"Model"),"s with PrimaryPart set, then you should be using the ",(0,i.kt)("inlineCode",{parentName:"p"},"cframe")," return method instead of the default\n",(0,i.kt)("inlineCode",{parentName:"p"},"nilParent")," return method. This will cause the parts or models to be CFramed away outside of the map rather than modifying the parent,\nwhich is a much more costly operation."),(0,i.kt)("h2",{id:"disabling-safety"},"Disabling safety"),(0,i.kt)("p",null,"The largest amount of time is dedicated to safety. If you ",(0,i.kt)("em",{parentName:"p"},"know")," that your calls to Pooler are correct, you don't need to bother.\nWhen creating your pool, pass ",(0,i.kt)("inlineCode",{parentName:"p"},"unsafe = true")," as an option to disable safety. This will speed up your pool drastically at the cost\nof being able to create some weird bugs if you don't check your code properly."))}u.isMDXComponent=!0}}]);